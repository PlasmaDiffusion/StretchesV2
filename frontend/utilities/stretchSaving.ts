import QRCode from "qrcode";
import storage from "./storage";
import { Stretch } from "../interfaces/stretchList";

/**
 * Save stretches and saveName to a given key.
 */
export async function saveStretchesToSlot(
  key: string,
  stretches: Stretch[],
  saveName: string
): Promise<void> {
  await storage.save({
    key,
    data: {
      stretches: [...stretches],
      saveName,
    },
  });
}

/**
 * Load stretches and saveName from a given key.
 */
export async function loadStretchesFromSlot(
  key: string
): Promise<{ stretches: Stretch[]; saveName?: string }> {
  const ret = await storage.load({
    key,
    autoSync: true,
    syncInBackground: true,
  });
  return { stretches: ret.stretches, saveName: ret.saveName };
}

/**
 * Load all save names for the given slots.
 */
export async function loadAllSaveNames(slots: number[]): Promise<string[]> {
  const names: string[] = [];
  for (let i = 0; i < slots.length; i++) {
    try {
      const ret = await storage.load({
        key: `save${slots[i]}`,
        autoSync: false,
        syncInBackground: false,
      });
      names.push(ret.saveName || "");
    } catch {
      names.push("");
    }
  }
  return names;
}

/**
 * Generate a QR code (as a data URL) containing a slot's saved stretches and name.
 */
export async function generateSlotQRCode(slotKey: string): Promise<string> {
  try {
    const ret = await storage.load({
      key: slotKey,
      autoSync: false,
      syncInBackground: false,
    });

    const jsonData = JSON.stringify({ [slotKey]: ret });
    return await QRCode.toDataURL(jsonData);
  } catch {
    throw new Error("No data found for this slot.");
  }
}

/**
 * Load stretches and save name from a QR code string (JSON data) for a single slot.
 * This expects the QR code to contain a JSON string in the same format as generated by generateSlotQRCode.
 */
export async function loadStretchesFromQRCode(qrData: string): Promise<void> {
  try {
    const allData: Record<string, { stretches: Stretch[]; saveName?: string }> =
      JSON.parse(qrData);

    // Only process the first slot in the QR data
    const slotKey = Object.keys(allData)[0];
    const slot = allData[slotKey];
    if (slot && slot.stretches) {
      await storage.save({
        key: slotKey,
        data: {
          stretches: slot.stretches,
          saveName: slot.saveName,
        },
      });
    } else {
      throw new Error("No valid slot data found in QR code.");
    }
  } catch (err) {
    throw new Error("Invalid QR code data: " + err);
  }
}
